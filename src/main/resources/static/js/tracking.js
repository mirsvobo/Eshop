class TrackingService{constructor(options={}){this.logPrefix='[TrackingService V7]';this.debugMode=!1
    this.sessionTrackedEvents=new Set();window.dataLayer=window.dataLayer||[];if(this.debugMode){console.log(`${this.logPrefix} INSTANCE CREATED. Debug mode: ${this.debugMode}. Options:`,JSON.parse(JSON.stringify(options)))}}
    _isConsentGivenFor(type){const currentDebugMode=this.debugMode;if(typeof window.CookieConsent==='undefined'||typeof window.CookieConsent.getUserPreferences!=='function'){if(currentDebugMode)console.warn(`${this.logPrefix} _isConsentGivenFor - CookieConsent utility not available. Assuming NO consent for '${type}'.`);return!1}
        const preferences=window.CookieConsent.getUserPreferences();if(currentDebugMode)console.log(`${this.logPrefix} _isConsentGivenFor - User Preferences:`,JSON.stringify(preferences));if(preferences&&preferences.acceptedCategories&&Array.isArray(preferences.acceptedCategories)){const given=preferences.acceptedCategories.includes(type);if(currentDebugMode)console.log(`${this.logPrefix} Consent check for '${type}': ${given}`);return given}
        if(currentDebugMode)console.log(`${this.logPrefix} Consent check for '${type}': No acceptedCategories array found. Defaulting to false.`);return!1}
    _isEventTracked(eventKey){const tracked=this.sessionTrackedEvents.has(eventKey);if(tracked&&this.debugMode){console.log(`${this.logPrefix} Event '${eventKey}' already tracked in this session.`)}
        return tracked}
    _markEventAsTracked(eventKey){this.sessionTrackedEvents.add(eventKey);if(this.debugMode){console.log(`${this.logPrefix} Marking event '${eventKey}' as tracked.`)}}
    _pushToDataLayer(payload){try{window.dataLayer.push({...payload});if(this.debugMode)console.log(`${this.logPrefix} PUSHED TO DATALAYER:`,JSON.parse(JSON.stringify(payload)));}catch(error){console.error(`${this.logPrefix} Error pushing to dataLayer:`,error,'Payload:',JSON.parse(JSON.stringify(payload)))}}
    _prepareEcommerceData(currency,value,items=[],couponCode=null,transaction_id=null,tax=null,shipping=null){const ecommerceData={currency:(currency||'CZK').toUpperCase(),value:value!=null?parseFloat(parseFloat(value).toFixed(2)):0.00,items:items.map(item=>({item_id:item.item_id||`product_${item.productId || item.id || 'unknown'}`,item_name:item.item_name||'Neznámý produkt',item_brand:item.item_brand||'Dřevníky Kolář',item_category:item.item_category||'Nezarazeno',price:item.price!=null?parseFloat(parseFloat(item.price).toFixed(2)):0.00,quantity:parseInt(item.quantity)||1}))};if(couponCode){ecommerceData.coupon=couponCode}
        if(transaction_id){ecommerceData.transaction_id=transaction_id}
        if(tax!=null){ecommerceData.tax=parseFloat(parseFloat(tax).toFixed(2))}
        if(shipping!=null){ecommerceData.shipping=parseFloat(parseFloat(shipping).toFixed(2))}
        return ecommerceData}
    _calculateConversionValue(eventType,price=null){let conversionValue=0;const numericPrice=price!=null?parseFloat(price):0;if(isNaN(numericPrice)&&eventType!=='view_item'){if(this.debugMode)console.warn(`${this.logPrefix} _calculateConversionValue - Invalid price for ${eventType}: ${price}. Defaulting to 0.`);return 0}
        switch(eventType){case 'view_item':conversionValue=1;break;case 'add_to_cart':conversionValue=numericPrice>0?parseFloat((numericPrice/10).toFixed(2)):0;break;case 'begin_checkout':conversionValue=numericPrice>0?parseFloat((numericPrice/5).toFixed(2)):0;break;case 'purchase':conversionValue=numericPrice;break;default:conversionValue=numericPrice}
        if(this.debugMode)console.log(`${this.logPrefix} _calculateConversionValue for ${eventType} with price ${price}: ${conversionValue}`);return conversionValue}
    trackViewItem(viewItemData){const logPrefix=`${this.logPrefix}[view_item]:`;if(this.debugMode)console.log(`${logPrefix} CALLED. Consent analytics: ${this._isConsentGivenFor('analytics')}, marketing: ${this._isConsentGivenFor('marketing')}`);if(!this._isConsentGivenFor('analytics')&&!this._isConsentGivenFor('marketing')){if(this.debugMode)console.log(`${logPrefix} Analytics & Marketing consent not given. Skipping.`);return}
        if(!viewItemData||!viewItemData.item_id){console.warn(`${logPrefix} Insufficient data for view_item. 'item_id' is required. Data:`,viewItemData);return}
        const eventKey=`view_item_${viewItemData.item_id}`;if(this._isEventTracked(eventKey)){if(this.debugMode)console.log(`${logPrefix} Event '${eventKey}' already tracked. Skipping.`);return}
        if(this.debugMode)console.log(`${logPrefix} Processing data:`,viewItemData);const conversionValue=this._calculateConversionValue('view_item',null);const ecommerceData=this._prepareEcommerceData(viewItemData.currency,conversionValue,[viewItemData]);const dataLayerPayload={'event':'view_item','ecommerce':ecommerceData,};this._markEventAsTracked(eventKey);this._pushToDataLayer(dataLayerPayload);console.log(`${logPrefix} FINISHED for item ${viewItemData.item_id}. GTM will handle sending to Ads/Analytics. Event value: ${conversionValue}`)}
    trackAddToCart(addToCartData){const logPrefix=`${this.logPrefix}[add_to_cart]:`;if(this.debugMode)console.log(`${logPrefix} CALLED. Consent analytics: ${this._isConsentGivenFor('analytics')}, marketing: ${this._isConsentGivenFor('marketing')}`);if(!this._isConsentGivenFor('analytics')&&!this._isConsentGivenFor('marketing')){if(this.debugMode)console.log(`${logPrefix} Analytics & Marketing consent not given. Skipping.`);return}
        if(!addToCartData||!addToCartData.item_id||!addToCartData.quantity){console.warn(`${logPrefix} Insufficient data for add_to_cart. 'item_id' and 'quantity' are required. Data:`,addToCartData);return}
        if(this.debugMode)console.log(`${logPrefix} Processing data:`,addToCartData);const itemPrice=parseFloat(addToCartData.price||0);const itemQuantity=parseInt(addToCartData.quantity||1);const totalItemValue=itemPrice*itemQuantity;const conversionValue=this._calculateConversionValue('add_to_cart',totalItemValue);const ecommerceData=this._prepareEcommerceData(addToCartData.currency,conversionValue,[addToCartData]);const dataLayerPayload={'event':'add_to_cart','ecommerce':ecommerceData};this._pushToDataLayer(dataLayerPayload);console.log(`${logPrefix} FINISHED for item ${addToCartData.item_id}. GTM will handle. Event value: ${conversionValue}`)}
    trackBeginCheckout(checkoutData){const logPrefix=`${this.logPrefix}[begin_checkout]:`;if(this.debugMode)console.log(`${logPrefix} CALLED. Consent analytics: ${this._isConsentGivenFor('analytics')}, marketing: ${this._isConsentGivenFor('marketing')}`);if(!this._isConsentGivenFor('analytics')&&!this._isConsentGivenFor('marketing')){if(this.debugMode)console.log(`${logPrefix} Analytics & Marketing consent not given. Skipping.`);return}
        if(!checkoutData||!checkoutData.items||checkoutData.items.length===0){console.warn(`${logPrefix} Insufficient data for begin_checkout. 'items' array is required. Data:`,checkoutData);return}
        const eventKey=`begin_checkout_session_${JSON.stringify(checkoutData.items.map(i => i.item_id))}`;if(this._isEventTracked(eventKey)){if(this.debugMode)console.log(`${logPrefix} Event '${eventKey}' already tracked. Skipping.`);return}
        if(this.debugMode)console.log(`${logPrefix} Processing data:`,checkoutData);const conversionValue=this._calculateConversionValue('begin_checkout',checkoutData.value);const ecommerceData=this._prepareEcommerceData(checkoutData.currency,conversionValue,checkoutData.items,checkoutData.coupon);const dataLayerPayload={'event':'begin_checkout','ecommerce':ecommerceData};this._markEventAsTracked(eventKey);this._pushToDataLayer(dataLayerPayload);console.log(`${logPrefix} FINISHED. GTM will handle. Event value: ${conversionValue}`)}
    trackPurchase(purchaseData){const logPrefix=`${this.logPrefix}[purchase]:`;if(this.debugMode)console.log(`${logPrefix} CALLED. Consent analytics: ${this._isConsentGivenFor('analytics')}, marketing: ${this._isConsentGivenFor('marketing')}`);if(!this._isConsentGivenFor('analytics')&&!this._isConsentGivenFor('marketing')){if(this.debugMode)console.log(`${logPrefix} Analytics & Marketing consent not given. Skipping.`);return}
        if(!purchaseData||!purchaseData.transaction_id){console.warn(`${logPrefix} Insufficient data for purchase. 'transaction_id' is required. Data:`,purchaseData);return}
        const eventKey=`purchase_${purchaseData.transaction_id}`;if(this._isEventTracked(eventKey)){if(this.debugMode)console.log(`${logPrefix} Event '${eventKey}' already tracked. Skipping.`);return}
        if(this.debugMode)console.log(`${logPrefix} Processing ecommerce data:`,purchaseData);const conversionValue=this._calculateConversionValue('purchase',purchaseData.value);const ecommercePayload=this._prepareEcommerceData(purchaseData.currency,conversionValue,purchaseData.items,purchaseData.coupon,purchaseData.transaction_id,purchaseData.tax,purchaseData.shipping);const dataLayerPayload={'event':'purchase','ecommerce':ecommercePayload};this._markEventAsTracked(eventKey);this._pushToDataLayer(dataLayerPayload);console.log(`${logPrefix} FINISHED for TX ID ${purchaseData.transaction_id}. GTM will handle. Event value: ${conversionValue}`)}
    initBaseScripts(){const logPrefix=`${this.logPrefix}[initBaseScripts]:`;if(this.debugMode)console.log(`${logPrefix} Base scripts initialization (if any specific needed).`);}}